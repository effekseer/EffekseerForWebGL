trigger:
  branches:
    include:
    - 16x

pool:
  vmImage: 'macos-10.14'

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      git submodule update --init --depth 1
      sh scripts/clone_dependencies.sh
      source emsdk/emsdk_env.sh
      pip install dukpy jsmin

      mkdir build_wasm
      cd build_wasm
      emcmake cmake ../src/ -DAS_WASM=ON
      make

      cd ..
      mkdir build_asmjs
      cd build_asmjs
      emcmake cmake ../src/ -DAS_WASM=OFF
      make

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      import dukpy
      import jsmin
      import shutil

      os.chdir("build_wasm")

      license_js = os.path.join("..", "src", "js", "license.js")
      effekseer_core_js = os.path.join(".", "effekseer.core.js")
      effekseer_src_js = os.path.join("..", "src", "js", "effekseer.src.js")
      effekseer_js = os.path.join("..", "Release", "effekseer.js")
      effekseer_min_js = os.path.join("..", "Release", "effekseer.min.js")
      outfile_js = open(effekseer_js, "w")
      outfile_min_js = open(effekseer_min_js, "w")

      with open(license_js) as infile:
          data = infile.read()
          outfile_js.write(data)
          outfile_min_js.write(data)

      with open(effekseer_core_js) as infile:
          data = infile.read()
          outfile_js.write(data)
          outfile_min_js.write(data)

      with open(effekseer_src_js) as infile:
          data = infile.read()
          data_es5 = dukpy.babel_compile(data)["code"]
          outfile_js.write(data_es5)
          outfile_min_js.write(jsmin.jsmin(data_es5))

      shutil.copy('effekseer.core.wasm', '../Release/effekseer.wasm')

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      import dukpy
      import jsmin
      import shutil

      os.chdir("build_asmjs")

      license_js = os.path.join("..", "src", "js", "license.js")
      effekseer_core_js = os.path.join(".", "effekseer.core.js")
      effekseer_src_js = os.path.join("..", "src", "js", "effekseer.src.js")
      effekseer_js = os.path.join("..", "Release", "effekseer_asmjs.js")
      effekseer_min_js = os.path.join("..", "Release", "effekseer_asmjs.min.js")
      outfile_js = open(effekseer_js, "w")
      outfile_min_js = open(effekseer_min_js, "w")

      with open(license_js) as infile:
          data = infile.read()
          outfile_js.write(data)
          outfile_min_js.write(data)

      with open(effekseer_core_js) as infile:
          data = infile.read()
          outfile_js.write(data)
          outfile_min_js.write(data)

      with open(effekseer_src_js) as infile:
          data = infile.read()
          data_es5 = dukpy.babel_compile(data)["code"]
          outfile_js.write(data_es5)
          outfile_min_js.write(jsmin.jsmin(data_es5))

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'Release'
    ArtifactName: 'EffekseerForWebGL161a'
    publishLocation: 'Container'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      python -m pip install --upgrade pip
      pip3 install chromedriver-binary==81.0.4044.138.0
      pip3 install selenium==3.141.0
      pip3 install requests

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      cd tests
      python3 take_screenshot.py

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'tests/screenshots'
    ArtifactName: 'screenshots'
    publishLocation: 'Container'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      cd tests
      python3 test.py

